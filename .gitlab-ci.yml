stages:
  - lint
  - test
  - e2e
  - security
  - build
  - deploy

variables:
  POSTGRES_DB: ready4hire_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ready4hire_test

# ============================================================================
# Python Backend - Lint
# ============================================================================

lint:python:
  stage: lint
  image: python:3.11-slim
  cache:
    key: ${CI_COMMIT_REF_SLUG}-python
    paths:
      - Ready4Hire/.cache/pip
  before_script:
    - cd Ready4Hire
    - export PIP_CACHE_DIR=.cache/pip
    - pip install -q black flake8 mypy pylint bandit
    - pip install -q -r requirements.txt
  script:
    - echo "Running Black formatter check..."
    - black --check app --line-length 120 --exclude="venv|__pycache__|.git" || true
    - echo "Running Flake8 linter..."
    - flake8 app --max-line-length=120 --exclude=venv,__pycache__,.git --count --statistics
    - echo "Running Bandit security check..."
    - bandit -c .bandit -r app -f json -o bandit-report.json -ll -i
    - echo "Bandit security scan completed"
  artifacts:
    reports:
      codequality: Ready4Hire/bandit-report.json
    paths:
      - Ready4Hire/bandit-report.json
    when: always
    expire_in: 1 week
  allow_failure: false

# ============================================================================
# Python Backend - Test
# ============================================================================

test:python:
  stage: test
  image: python:3.11-slim
  services:
    - postgres:15
  cache:
    key: ${CI_COMMIT_REF_SLUG}-python-test
    paths:
      - Ready4Hire/.cache/pip
    policy: pull
  before_script:
    - cd Ready4Hire
    - export PIP_CACHE_DIR=.cache/pip
    - pip install -q pytest pytest-asyncio pytest-cov pytest-mock httpx
    - pip install -q -r requirements.txt
  script:
    - echo "Running Python tests with coverage..."
    - pytest tests/ -v --cov=app --cov-report=xml --cov-report=term --cov-report=html --maxfail=5
    - echo "Tests completed successfully"
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: Ready4Hire/coverage.xml
      junit: Ready4Hire/junit.xml
    paths:
      - Ready4Hire/htmlcov/
      - Ready4Hire/coverage.xml
    when: always
    expire_in: 1 week
  allow_failure: false

# ============================================================================
# .NET Frontend - Lint & Build
# ============================================================================

lint:dotnet:
  stage: lint
  image: mcr.microsoft.com/dotnet/sdk:9.0
  before_script:
    - cd WebApp
  script:
    - echo "Restoring .NET dependencies..."
    - dotnet restore
    - echo "Building .NET project..."
    - dotnet build --no-restore --configuration Release
    - echo "Running .NET format check..."
    - dotnet format --verify-no-changes --no-restore || true
  artifacts:
    paths:
      - WebApp/bin/
      - WebApp/obj/
    expire_in: 1 hour
  allow_failure: true

# ============================================================================
# .NET Frontend - Test
# ============================================================================

test:dotnet:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:9.0
  services:
    - postgres:15
  variables:
    POSTGRES_CONNECTION: "Host=postgres;Port=5432;Database=ready4hire_test;Username=postgres;Password=postgres"
  before_script:
    - cd WebApp
    - dotnet restore
  script:
    - dotnet build --no-restore --configuration Release
    - dotnet test --no-build --configuration Release --verbosity normal || true
  allow_failure: true

# ============================================================================
# Security Scanning
# ============================================================================

security:trivy:
  stage: security
  image: aquasec/trivy:latest
  script:
    - trivy fs --exit-code 0 --no-progress --format json --output trivy-report.json .
    - trivy fs --exit-code 0 --severity HIGH,CRITICAL --no-progress .
  artifacts:
    reports:
      container_scanning: trivy-report.json
    when: always
    expire_in: 1 week
  allow_failure: true

security:safety:
  stage: security
  image: python:3.11-slim
  before_script:
    - cd Ready4Hire
    - pip install --quiet safety
  script:
    - echo "Running Safety dependency check..."
    - safety check --json --output safety-report.json || true
    - safety check --bare || echo "Vulnerabilities found, check report"
  artifacts:
    paths:
      - Ready4Hire/safety-report.json
    when: always
    expire_in: 1 week
  allow_failure: true

security:audit-npm:
  stage: security
  image: node:18
  script:
    - echo "Auditing Mobile App dependencies..."
    - cd MobileApp
    - npm audit --json > npm-audit-mobile.json || true
    - npm audit || echo "Vulnerabilities found in Mobile App"
    - echo "Auditing E2E tests dependencies..."
    - cd ../e2e-tests
    - npm audit --json > npm-audit-e2e.json || true
    - npm audit || echo "Vulnerabilities found in E2E tests"
  artifacts:
    paths:
      - MobileApp/npm-audit-mobile.json
      - e2e-tests/npm-audit-e2e.json
    when: always
    expire_in: 1 week
  allow_failure: true

# ============================================================================
# Docker Build (Optional)
# ============================================================================

build:docker:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - docker info
  script:
    - cd Ready4Hire
    - docker build -t ready4hire-backend:$CI_COMMIT_SHORT_SHA .
    - echo "Docker image built successfully"
  only:
    - main
    - master
    - develop
  allow_failure: true

# ============================================================================
# Deploy to Development (Optional)
# ============================================================================

deploy:dev:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
  script:
    - echo "Deployment to development environment..."
    - echo "Add your deployment commands here"
  only:
    - develop
  when: manual
  allow_failure: true

# ============================================================================
# MobileApp - Lint & Test
# ============================================================================

lint:mobile:
  stage: lint
  image: node:18
  cache:
    key: ${CI_COMMIT_REF_SLUG}-node
    paths:
      - MobileApp/node_modules/
      - MobileApp/.npm/
  before_script:
    - cd MobileApp
    - npm ci --cache .npm --prefer-offline
  script:
    - echo "Running Mobile App linter..."
    - npm run lint || echo "Linting completed with warnings"
  allow_failure: true

test:mobile:
  stage: test
  image: node:18
  cache:
    key: ${CI_COMMIT_REF_SLUG}-node-test
    paths:
      - MobileApp/node_modules/
      - MobileApp/.npm/
    policy: pull
  before_script:
    - cd MobileApp
    - npm ci --cache .npm --prefer-offline
  script:
    - echo "Running Mobile App tests..."
    - npm test -- --coverage --watchAll=false --maxWorkers=2 || echo "Tests completed with issues"
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: MobileApp/coverage/cobertura-coverage.xml
    paths:
      - MobileApp/coverage/
    when: always
    expire_in: 1 week
  allow_failure: true

# ============================================================================
# E2E Tests with Playwright
# ============================================================================

e2e:playwright:
  stage: e2e
  image: mcr.microsoft.com/playwright:v1.40.1-focal
  cache:
    key: ${CI_COMMIT_REF_SLUG}-e2e
    paths:
      - e2e-tests/node_modules/
  services:
    - postgres:15
  before_script:
    - cd e2e-tests
    - npm ci
  script:
    - echo "Running E2E tests with Playwright..."
    - npx playwright test --reporter=html,junit
  artifacts:
    when: always
    paths:
      - e2e-tests/playwright-report/
      - e2e-tests/test-results/
    reports:
      junit: e2e-tests/junit-results.xml
    expire_in: 1 week
  allow_failure: true
  only:
    - main
    - develop

# ============================================================================
# Deploy to Staging
# ============================================================================

deploy:staging:
  stage: deploy
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - docker info
  script:
    - echo "Deploying to Staging environment..."
    - docker-compose -f docker-compose.staging.yml down
    - docker-compose -f docker-compose.staging.yml up -d --build
    - echo "Staging deployment completed"
  environment:
    name: staging
    url: http://staging.ready4hire.local
  only:
    - develop
  when: manual
  allow_failure: false

# ============================================================================
# Deploy to QA
# ============================================================================

deploy:qa:
  stage: deploy
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - docker info
  script:
    - echo "Deploying to QA environment..."
    - docker-compose -f docker-compose.qa.yml down
    - docker-compose -f docker-compose.qa.yml up -d --build
    - echo "QA deployment completed"
  environment:
    name: qa
    url: http://qa.ready4hire.local
  only:
    - develop
    - feature/*
  when: manual
  allow_failure: false

# ============================================================================
# Deploy to Production
# ============================================================================

deploy:prod:
  stage: deploy
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - docker info
  script:
    - echo "Deploying to Production environment..."
    - docker-compose -f docker-compose.production.yml down
    - docker-compose -f docker-compose.production.yml up -d --build
    - echo "Production deployment completed"
  environment:
    name: production
    url: https://ready4hire.com
  only:
    - main
    - master
  when: manual
  allow_failure: false

