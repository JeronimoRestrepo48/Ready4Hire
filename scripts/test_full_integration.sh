#!/bin/bash

###############################################################################
# Test de Integraci√≥n Completa: Frontend + Backend
# Prueba el flujo completo de dos fases:
# 1. Fase de contexto (5 preguntas) - NO evaluadas
# 2. Fase t√©cnica (10 preguntas) - Evaluadas con LLM
###############################################################################

set -e

# Colores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # Sin color

API_URL="${API_URL:-http://localhost:8000}"

echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${BLUE}‚ïë   TEST DE INTEGRACI√ìN COMPLETA                     ‚ïë${NC}"
echo -e "${BLUE}‚ïë   Frontend (Blazor) + Backend (FastAPI)           ‚ïë${NC}"
echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"

# 1. Health Check
echo -e "\n${YELLOW}[1/5] Verificando health del sistema...${NC}"
HEALTH=$(curl -s "${API_URL}/api/v2/health")
echo "$HEALTH" | jq '.'

STATUS=$(echo "$HEALTH" | jq -r '.status')
if [ "$STATUS" != "healthy" ]; then
    echo -e "${RED}‚ùå Sistema no est√° saludable${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Sistema saludable${NC}"

# 2. Iniciar entrevista (V2)
echo -e "\n${YELLOW}[2/5] Iniciando entrevista...${NC}"
START_RESPONSE=$(curl -s -X POST "${API_URL}/api/v2/interviews" \
  -H "Content-Type: application/json" \
  -d '{
    "user_id": "test-user-integration-'$(date +%s)'",
    "role": "Backend Developer",
    "category": "technical",
    "difficulty": "mid"
  }')

echo "$START_RESPONSE" | jq '.'

INTERVIEW_ID=$(echo "$START_RESPONSE" | jq -r '.interview_id')
INTERVIEW_STATUS=$(echo "$START_RESPONSE" | jq -r '.status')
FIRST_QUESTION=$(echo "$START_RESPONSE" | jq -r '.first_question.text')

if [ "$INTERVIEW_STATUS" != "context" ]; then
    echo -e "${RED}‚ùå Estado inicial incorrecto: $INTERVIEW_STATUS (esperado: context)${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Entrevista iniciada - ID: $INTERVIEW_ID${NC}"
echo -e "${BLUE}Primera pregunta: $FIRST_QUESTION${NC}"

# 3. Fase de CONTEXTO: Responder 5 preguntas (NO evaluadas)
echo -e "\n${YELLOW}[3/5] FASE DE CONTEXTO: Respondiendo 5 preguntas...${NC}"

CONTEXT_ANSWERS=(
    "Tengo 3 a√±os de experiencia en desarrollo backend con .NET"
    "He trabajado con C#, ASP.NET Core, Entity Framework y SQL Server"
    "Me especializo en arquitecturas de microservicios y APIs RESTful"
    "Busco mejorar mis habilidades en dise√±o de sistemas distribuidos"
    "Mi √∫ltimo proyecto fue una plataforma de e-commerce con alta concurrencia"
)

for i in {0..4}; do
    CONTEXT_NUM=$((i+1))
    echo -e "\n${BLUE}  ‚Üí Pregunta de contexto ${CONTEXT_NUM}/5${NC}"
    
    CONTEXT_RESPONSE=$(curl -s -X POST "${API_URL}/api/v2/interviews/${INTERVIEW_ID}/answers" \
      -H "Content-Type: application/json" \
      -d "{
        \"answer\": \"${CONTEXT_ANSWERS[$i]}\",
        \"time_taken\": 15
      }")
    
    echo "$CONTEXT_RESPONSE" | jq '.'
    
    RESPONSE_STATUS=$(echo "$CONTEXT_RESPONSE" | jq -r '.interview_status')
    
    if [ "$RESPONSE_STATUS" = "context" ]; then
        NEXT_Q=$(echo "$CONTEXT_RESPONSE" | jq -r '.next_question.text // "N/A"')
        echo -e "${GREEN}  ‚úÖ Respuesta ${CONTEXT_NUM} guardada (sin evaluaci√≥n LLM)${NC}"
        
        if [ "$NEXT_Q" != "N/A" ] && [ "$NEXT_Q" != "null" ]; then
            echo -e "${BLUE}  Siguiente: $NEXT_Q${NC}"
        fi
    elif [ "$RESPONSE_STATUS" = "questions" ]; then
        echo -e "${GREEN}  ‚úÖ Transici√≥n a fase t√©cnica${NC}"
        NEXT_Q=$(echo "$CONTEXT_RESPONSE" | jq -r '.next_question.text // "N/A"')
        echo -e "${BLUE}  Primera pregunta t√©cnica: $NEXT_Q${NC}"
        break
    else
        echo -e "${RED}  ‚ùå Estado inesperado: $RESPONSE_STATUS${NC}"
        exit 1
    fi
    
    sleep 1
done

# 4. Fase T√âCNICA: Responder 3 preguntas (EVALUADAS con LLM)
echo -e "\n${YELLOW}[4/5] FASE T√âCNICA: Respondiendo preguntas con evaluaci√≥n LLM...${NC}"

TECHNICAL_ANSWERS=(
    "SOLID son principios de dise√±o orientado a objetos: Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation y Dependency Inversion"
    "La inyecci√≥n de dependencias es un patr√≥n que permite invertir el control, inyectando dependencias desde el exterior en lugar de crearlas internamente"
    "RESTful API usa HTTP methods (GET, POST, PUT, DELETE) y sigue principios REST como stateless, recursos identificables con URIs y representaciones"
)

for i in {0..2}; do
    TECH_NUM=$((i+1))
    echo -e "\n${BLUE}  ‚Üí Pregunta t√©cnica ${TECH_NUM}${NC}"
    
    TECH_RESPONSE=$(curl -s -X POST "${API_URL}/api/v2/interviews/${INTERVIEW_ID}/answers" \
      -H "Content-Type: application/json" \
      -d "{
        \"answer\": \"${TECHNICAL_ANSWERS[$i]}\",
        \"time_taken\": 45
      }")
    
    echo "$TECH_RESPONSE" | jq '.'
    
    # Verificar evaluaci√≥n
    SCORE=$(echo "$TECH_RESPONSE" | jq -r '.evaluation.score // "N/A"')
    IS_CORRECT=$(echo "$TECH_RESPONSE" | jq -r '.evaluation.is_correct // "N/A"')
    EMOTION=$(echo "$TECH_RESPONSE" | jq -r '.emotion.emotion // "N/A"')
    FEEDBACK=$(echo "$TECH_RESPONSE" | jq -r '.feedback // "N/A"')
    
    if [ "$SCORE" != "N/A" ]; then
        SCORE_EMOJI="üåü"
        [ $(echo "$SCORE < 6" | bc) -eq 1 ] && SCORE_EMOJI="üí°"
        [ $(echo "$SCORE >= 6" | bc) -eq 1 ] && [ $(echo "$SCORE < 8" | bc) -eq 1 ] && SCORE_EMOJI="üëç"
        
        echo -e "${GREEN}  ‚úÖ Evaluaci√≥n completada${NC}"
        echo -e "  ${SCORE_EMOJI} Score: ${SCORE}/10 - Correcto: ${IS_CORRECT}"
        echo -e "  üí≠ Emoci√≥n: ${EMOTION}"
        echo -e "  üìù Feedback: ${FEEDBACK:0:100}..."
    else
        echo -e "${RED}  ‚ùå No se recibi√≥ evaluaci√≥n${NC}"
    fi
    
    sleep 2
done

# 5. Finalizar entrevista
echo -e "\n${YELLOW}[5/5] Finalizando entrevista...${NC}"
END_RESPONSE=$(curl -s -X POST "${API_URL}/api/v2/interviews/${INTERVIEW_ID}/end")
echo "$END_RESPONSE" | jq '.'

SUMMARY=$(echo "$END_RESPONSE" | jq -r '.summary // "N/A"')
if [ "$SUMMARY" != "N/A" ]; then
    echo -e "${GREEN}‚úÖ Resumen generado${NC}"
    echo -e "${BLUE}$SUMMARY${NC}"
fi

# Resumen final
echo -e "\n${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${GREEN}‚ïë   ‚úÖ TEST DE INTEGRACI√ìN COMPLETO                  ‚ïë${NC}"
echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"

echo -e "\n${BLUE}üìä Flujo Verificado:${NC}"
echo -e "  1. ‚úÖ Health check del sistema"
echo -e "  2. ‚úÖ Inicio de entrevista (fase context)"
echo -e "  3. ‚úÖ 5 preguntas de contexto (sin evaluaci√≥n LLM)"
echo -e "  4. ‚úÖ Transici√≥n a fase t√©cnica"
echo -e "  5. ‚úÖ 3 preguntas t√©cnicas (con evaluaci√≥n LLM)"
echo -e "  6. ‚úÖ Finalizaci√≥n con resumen"

echo -e "\n${GREEN}üéâ Integraci√≥n frontend-backend lista para uso${NC}"

exit 0
