name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  lint-python:
    name: Lint Python Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd Ready4Hire
        pip install -r requirements.txt
        pip install black flake8 mypy pylint bandit
    
    - name: Run Black (Format Check)
      run: |
        cd Ready4Hire
        black --check app --line-length 120 --exclude="venv|__pycache__|.git"
      continue-on-error: true
    
    - name: Run Flake8 (Linting)
      run: |
        cd Ready4Hire
        flake8 app --max-line-length=120 --exclude=venv,__pycache__,.git --count --statistics
      continue-on-error: false
    
    - name: Run Bandit (Security)
      run: |
        cd Ready4Hire
        bandit -r app -f json -o bandit-report.json || true
      continue-on-error: true

  test-python:
    name: Test Python Backend
    runs-on: ubuntu-latest
    needs: lint-python
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ready4hire_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd Ready4Hire
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-mock httpx
    
    - name: Run Tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ready4hire_test
        OLLAMA_URL: http://localhost:11434
      run: |
        cd Ready4Hire
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term
      continue-on-error: true
    
    - name: Upload Coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./Ready4Hire/coverage.xml
        flags: backend
        name: backend-coverage
      continue-on-error: true

  lint-dotnet:
    name: Lint .NET Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Restore dependencies
      run: |
        cd WebApp
        dotnet restore
    
    - name: Build
      run: |
        cd WebApp
        dotnet build --no-restore --configuration Release
    
    - name: Run .NET Format Check
      run: |
        cd WebApp
        dotnet format --verify-no-changes --no-restore
      continue-on-error: true

  test-dotnet:
    name: Test .NET Frontend
    runs-on: ubuntu-latest
    needs: lint-dotnet
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ready4hire_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Restore dependencies
      run: |
        cd WebApp
        dotnet restore
    
    - name: Build
      run: |
        cd WebApp
        dotnet build --no-restore --configuration Release
    
    - name: Test
      env:
        POSTGRES_CONNECTION: "Host=localhost;Port=5432;Database=ready4hire_test;Username=postgres;Password=postgres"
      run: |
        cd WebApp
        dotnet test --no-build --configuration Release --verbosity normal
      continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [lint-python, test-python, lint-dotnet, test-dotnet, security-scan]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        echo "Build completed!"
        echo "Python Lint: ${{ needs.lint-python.result }}"
        echo "Python Test: ${{ needs.test-python.result }}"
        echo ".NET Lint: ${{ needs.lint-dotnet.result }}"
        echo ".NET Test: ${{ needs.test-dotnet.result }}"
        echo "Security: ${{ needs.security-scan.result }}"
