@using Ready4Hire.Data
@using Ready4Hire.MVVM.ViewModels
@using Ready4Hire.MVVM.Models
@using Microsoft.EntityFrameworkCore

<div class="modern-sidebar">
    <!-- Sidebar Header -->
    <div class="sidebar-header-modern">
        <div class="sidebar-logo">
            <div class="logo-icon">
                <svg width="28" height="28" viewBox="0 0 24 24" fill="none">
                    <path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M2 17L12 22L22 17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M2 12L12 17L22 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </div>
            <span class="logo-text">Ready<strong>4</strong>Hire</span>
        </div>
        
        <button class="btn-new-chat" @onclick="StartNewChat">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                <path d="M12 5V19M5 12H19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            <span>Nueva Conversación</span>
        </button>
    </div>

    <!-- Chats List -->
    <div class="sidebar-content-modern">
        <div class="chats-section">
            <div class="section-label">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                    <path d="M12 8V12L15 15" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                    <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
                </svg>
                <span>Historial</span>
            </div>
            
            @if (vm?.Chats != null && vm.Chats.Any())
            {
                <div class="chats-list">
                    @foreach (var chat in vm.Chats.OrderByDescending(c => c.CreatedAt).Take(20))
                    {
                        <NavLink class="chat-item" href="@($"/chat/{chat.Id}")" Match="NavLinkMatch.All">
                            <div class="chat-item-icon">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                                    <path d="M21 15C21 15.5304 20.7893 16.0391 20.4142 16.4142C20.0391 16.7893 19.5304 17 19 17H7L3 21V5C3 4.46957 3.21071 3.96086 3.58579 3.58579C3.96086 3.21071 4.46957 3 5 3H19C19.5304 3 20.0391 3.21071 20.4142 3.58579C20.7893 3.96086 21 4.46957 21 5V15Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                </svg>
                            </div>
                            <div class="chat-item-content">
                                <div class="chat-item-title">@(string.IsNullOrEmpty(chat.Title) ? "Nueva Conversación" : chat.Title)</div>
                                <div class="chat-item-meta">
                                    <span class="chat-item-mode">@GetModeLabel(chat.ChatMode)</span>
                                    <span class="chat-item-dot">•</span>
                                    <span class="chat-item-date">@GetRelativeTime(chat.CreatedAt)</span>
                                </div>
                            </div>
                            @if (chat.Score > 0)
                            {
                                <div class="chat-item-badge">
                                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none">
                                        <path d="M12 2L15.09 8.26L22 9.27L17 14.14L18.18 21.02L12 17.77L5.82 21.02L7 14.14L2 9.27L8.91 8.26L12 2Z" fill="currentColor"/>
                                    </svg>
                                    @chat.Score
                                </div>
                            }
                        </NavLink>
                    }
                </div>
            }
            else
            {
                <div class="empty-state">
                    <svg width="48" height="48" viewBox="0 0 24 24" fill="none">
                        <path d="M21 15C21 15.5304 20.7893 16.0391 20.4142 16.4142C20.0391 16.7893 19.5304 17 19 17H7L3 21V5C3 4.46957 3.21071 3.96086 3.58579 3.58579C3.96086 3.21071 4.46957 3 5 3H19C19.5304 3 20.0391 3.21071 20.4142 3.58579C20.7893 3.96086 21 4.46957 21 5V15Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    <p>No hay conversaciones aún</p>
                    <span>Inicia una nueva entrevista</span>
                </div>
            }
        </div>
    </div>

    <!-- Sidebar Footer -->
    <div class="sidebar-footer-modern">
        <div class="user-profile">
            <div class="user-avatar-modern">
                @GetUserInitials()
            </div>
            <div class="user-info">
                <div class="user-name">@GetUserName()</div>
                <div class="user-email">@GetUserEmail()</div>
            </div>
        </div>

        <div class="sidebar-actions">
            <button class="sidebar-action-btn" @onclick="NavigateToSettings" title="Configuración">
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none">
                    <circle cx="12" cy="12" r="3" stroke="currentColor" stroke-width="2"/>
                    <path d="M12 1V3M12 21V23M4.22 4.22L5.64 5.64M18.36 18.36L19.78 19.78M1 12H3M21 12H23M4.22 19.78L5.64 18.36M18.36 5.64L19.78 4.22" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                </svg>
                <span>Configuración</span>
            </button>
            
            <button class="sidebar-action-btn" @onclick="Logout" title="Cerrar sesión">
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none">
                    <path d="M9 21H5C4.46957 21 3.96086 20.7893 3.58579 20.4142C3.21071 20.0391 3 19.5304 3 19V5C3 4.46957 3.21071 3.96086 3.58579 3.58579C3.96086 3.21071 4.46957 3 5 3H9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M16 17L21 12L16 7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M21 12H9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <span>Cerrar Sesión</span>
            </button>
        </div>
    </div>
</div>

@inject NavigationManager Navigation
@inject Ready4Hire.Services.AuthService AuthService

@code {
    [Inject]
    private IDbContextFactory<AppDbContext> DbFactory { get; set; } = null!;
    
    private NavMenuViewModel? vm;

    protected override async Task OnInitializedAsync()
    {
        // Verificar autenticación
        if (!await AuthService.IsAuthenticatedAsync())
        {
            Navigation.NavigateTo("/", true);
            return;
        }

        using var db = await DbFactory.CreateDbContextAsync();
        vm = new NavMenuViewModel(db);
        await vm.LoadDataAsync();
    }

    private void StartNewChat()
    {
        Navigation.NavigateTo("/chat/0", true);
    }

    private void NavigateToSettings()
    {
        Navigation.NavigateTo("/settings", false);
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/", true);
    }

    private string GetUserInitials()
    {
        if (vm?.CurrentUser == null)
            return "U";
        
        var firstName = vm.CurrentUser.Name?.Trim() ?? "";
        var lastName = vm.CurrentUser.LastName?.Trim() ?? "";
        
        var initials = "";
        if (!string.IsNullOrEmpty(firstName))
            initials += firstName[0];
        if (!string.IsNullOrEmpty(lastName))
            initials += lastName[0];
        
        return string.IsNullOrEmpty(initials) ? "U" : initials.ToUpper();
    }

    private string GetUserName()
    {
        if (vm?.CurrentUser == null)
            return "Usuario";
        
        var fullName = $"{vm.CurrentUser.Name} {vm.CurrentUser.LastName}".Trim();
        return string.IsNullOrEmpty(fullName) ? "Usuario" : fullName;
    }

    private string GetUserEmail()
    {
        return vm?.CurrentUser?.Email ?? "usuario@ejemplo.com";
    }

    private string GetModeLabel(string mode)
    {
        return mode switch
        {
            "technical" => "Técnica",
            "soft_skills" => "Soft Skills",
            "practice" => "Práctica",
            "exam" => "Examen",
            _ => "Entrevista"
        };
    }

    private string GetRelativeTime(DateTime date)
    {
        var timeSpan = DateTime.Now - date;
        
        if (timeSpan.TotalMinutes < 1)
            return "Ahora";
        if (timeSpan.TotalMinutes < 60)
            return $"Hace {(int)timeSpan.TotalMinutes}m";
        if (timeSpan.TotalHours < 24)
            return $"Hace {(int)timeSpan.TotalHours}h";
        if (timeSpan.TotalDays < 7)
            return $"Hace {(int)timeSpan.TotalDays}d";
        if (timeSpan.TotalDays < 30)
            return $"Hace {(int)(timeSpan.TotalDays / 7)}sem";
        
        return date.ToString("dd MMM");
    }
}
