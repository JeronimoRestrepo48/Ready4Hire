@page "/home"
@using Microsoft.EntityFrameworkCore
@using Ready4Hire.Data
@using Ready4Hire.MVVM.Models
@using Ready4Hire.Services
@inject IDbContextFactory<AppDbContext> DbFactory
@inject NavigationManager Navigation
@inject AuthService AuthService

<PageTitle>Inicio - Ready4Hire</PageTitle>

@attribute [StreamRendering(false)]

<div class="home-container">
    <!-- Welcome Header -->
    <div class="welcome-section">
        <div class="welcome-content">
            <h1 class="welcome-title">춰Bienvenido, @GetUserName()! 游녦</h1>
            <p class="welcome-subtitle">Prep치rate para tu pr칩xima entrevista con IA</p>
        </div>
        
        @if (currentUser != null)
        {
            <div class="user-level-card">
                <div class="level-circle">
                    <span class="level-number">@currentUser.Level</span>
                    <span class="level-label">NIVEL</span>
                </div>
                <div class="level-info">
                    <div class="xp-bar-container">
                        <div class="xp-bar">
                            <div class="xp-fill" style="width: @GetLevelProgress()%"></div>
                        </div>
                        <p class="xp-text">@currentUser.Experience / @GetNextLevelXP() XP</p>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Quick Stats -->
    @if (currentUser != null)
    {
        <div class="stats-grid">
            <div class="stat-card stat-card-interviews">
                <div class="stat-icon">
                    <svg width="32" height="32" viewBox="0 0 24 24" fill="none">
                        <path d="M21 15C21 15.5304 20.7893 16.0391 20.4142 16.4142C20.0391 16.7893 19.5304 17 19 17H7L3 21V5C3 4.46957 3.21071 3.96086 3.58579 3.58579C3.96086 3.21071 4.46957 3 5 3H19C19.5304 3 20.0391 3.21071 20.4142 3.58579C20.7893 3.96086 21 4.46957 21 5V15Z" stroke="currentColor" stroke-width="2"/>
                    </svg>
                </div>
                <div class="stat-content">
                    <h3 class="stat-value">@totalInterviews</h3>
                    <p class="stat-label">Entrevistas</p>
                </div>
            </div>

            <div class="stat-card stat-card-points">
                <div class="stat-icon">
                    <svg width="32" height="32" viewBox="0 0 24 24" fill="none">
                        <path d="M12 2L15.09 8.26L22 9.27L17 14.14L18.18 21.02L12 17.77L5.82 21.02L7 14.14L2 9.27L8.91 8.26L12 2Z" stroke="currentColor" stroke-width="2"/>
                    </svg>
                </div>
                <div class="stat-content">
                    <h3 class="stat-value">@currentUser.TotalPoints</h3>
                    <p class="stat-label">Puntos Totales</p>
                </div>
            </div>

            <div class="stat-card stat-card-streak">
                <div class="stat-icon">
                    <svg width="32" height="32" viewBox="0 0 24 24" fill="none">
                        <path d="M13 2L3 14H12L11 22L21 10H12L13 2Z" stroke="currentColor" stroke-width="2"/>
                    </svg>
                </div>
                <div class="stat-content">
                    <h3 class="stat-value">@currentUser.StreakDays</h3>
                    <p class="stat-label">D칤as de Racha</p>
                </div>
            </div>

            <div class="stat-card stat-card-badges">
                <div class="stat-icon">
                    <svg width="32" height="32" viewBox="0 0 24 24" fill="none">
                        <path d="M20.84 4.61C20.3292 4.09916 19.7228 3.69368 19.0554 3.41492C18.3879 3.13616 17.6725 2.98986 16.95 2.98447C16.2275 2.97909 15.5102 3.11473 14.8389 3.38368C14.1677 3.65263 13.5555 4.04964 13.04 4.55L12 5.59L10.96 4.55C9.92754 3.51753 8.53318 2.93624 7.08 2.93624C5.62682 2.93624 4.23246 3.51753 3.2 4.55C2.16753 5.58247 1.58624 6.97682 1.58624 8.43C1.58624 9.88318 2.16753 11.2775 3.2 12.31L4.24 13.35L12 21.11L19.76 13.35L20.8 12.31C21.3108 11.7992 21.7163 11.1928 21.9951 10.5254C22.2738 9.85796 22.4201 9.14256 22.4255 8.42005C22.4309 7.69754 22.2953 6.98024 22.0263 6.30886C21.7574 5.63748 21.3603 5.02551 20.8575 4.50751L20.84 4.61Z" stroke="currentColor" stroke-width="2"/>
                    </svg>
                </div>
                <div class="stat-content">
                    <h3 class="stat-value">@userBadgesCount</h3>
                    <p class="stat-label">Insignias</p>
                </div>
            </div>
        </div>
    }

    <!-- Quick Actions -->
    <div class="actions-section">
        <h2 class="section-title">Acciones R치pidas</h2>
        <div class="actions-grid">
            <button class="action-card action-card-interview" @onclick="StartNewInterview">
                <div class="action-icon-container">
                    <svg width="48" height="48" viewBox="0 0 24 24" fill="none">
                        <path d="M21 15C21 15.5304 20.7893 16.0391 20.4142 16.4142C20.0391 16.7893 19.5304 17 19 17H7L3 21V5C3 4.46957 3.21071 3.96086 3.58579 3.58579C3.96086 3.21071 4.46957 3 5 3H19C19.5304 3 20.0391 3.21071 20.4142 3.58579C20.7893 3.96086 21 4.46957 21 5V15Z" stroke="currentColor" stroke-width="2"/>
                    </svg>
                </div>
                <h3 class="action-title">Nueva Entrevista</h3>
                <p class="action-description">Inicia una sesi칩n de pr치ctica con IA</p>
            </button>

            <button class="action-card action-card-games" @onclick="GoToGames">
                <div class="action-icon-container">
                    <svg width="48" height="48" viewBox="0 0 24 24" fill="none">
                        <path d="M20.84 4.61C20.3292 4.09916 19.7228 3.69368 19.0554 3.41492C18.3879 3.13616 17.6725 2.98986 16.95 2.98447C16.2275 2.97909 15.5102 3.11473 14.8389 3.38368C14.1677 3.65263 13.5555 4.04964 13.04 4.55L12 5.59L10.96 4.55C9.92754 3.51753 8.53318 2.93624 7.08 2.93624C5.62682 2.93624 4.23246 3.51753 3.2 4.55C2.16753 5.58247 1.58624 6.97682 1.58624 8.43C1.58624 9.88318 2.16753 11.2775 3.2 12.31L4.24 13.35L12 21.11L19.76 13.35L20.8 12.31C21.3108 11.7992 21.7163 11.1928 21.9951 10.5254C22.2738 9.85796 22.4201 9.14256 22.4255 8.42005C22.4309 7.69754 22.2953 6.98024 22.0263 6.30886C21.7574 5.63748 21.3603 5.02551 20.8575 4.50751L20.84 4.61Z" stroke="currentColor" stroke-width="2"/>
                    </svg>
                </div>
                <h3 class="action-title">Juegos de Entrenamiento</h3>
                <p class="action-description">Mejora tus habilidades jugando</p>
            </button>

            <button class="action-card action-card-reports" @onclick="ViewReports">
                <div class="action-icon-container">
                    <svg width="48" height="48" viewBox="0 0 24 24" fill="none">
                        <path d="M3 3V21H21" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                        <path d="M7 16L12 11L16 15L21 8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </div>
                <h3 class="action-title">Ver Reportes</h3>
                <p class="action-description">Analiza tu progreso</p>
            </button>

            <button class="action-card action-card-profile" @onclick="ViewProfile">
                <div class="action-icon-container">
                    <svg width="48" height="48" viewBox="0 0 24 24" fill="none">
                        <circle cx="12" cy="8" r="5" stroke="currentColor" stroke-width="2"/>
                        <path d="M3 21C3 17.134 7.029 14 12 14C16.971 14 21 17.134 21 21" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                    </svg>
                </div>
                <h3 class="action-title">Mi Perfil</h3>
                <p class="action-description">Configura tu cuenta</p>
            </button>
        </div>
    </div>

    <!-- Recent Activity -->
    @if (recentChats.Any())
    {
        <div class="activity-section">
            <div class="section-header">
                <h2 class="section-title">Actividad Reciente</h2>
                <button class="btn-view-all" @onclick="ViewAllChats">Ver Todo</button>
            </div>
            <div class="activity-list">
                @foreach (var chat in recentChats.Take(5))
                {
                    <div class="activity-item" @onclick="@(() => OpenChat(chat.Id))">
                        <div class="activity-icon">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                                <path d="M21 15C21 15.5304 20.7893 16.0391 20.4142 16.4142C20.0391 16.7893 19.5304 17 19 17H7L3 21V5C3 4.46957 3.21071 3.96086 3.58579 3.58579C3.96086 3.21071 4.46957 3 5 3H19C19.5304 3 20.0391 3.21071 20.4142 3.58579C20.7893 3.96086 21 4.46957 21 5V15Z" stroke="currentColor" stroke-width="2"/>
                            </svg>
                        </div>
                        <div class="activity-content">
                            <h4 class="activity-title">@chat.Title</h4>
                            <p class="activity-time">@chat.CreatedAt.ToString("dd MMM yyyy, HH:mm")</p>
                        </div>
                        <div class="activity-arrow">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                                <path d="M9 6L15 12L9 18" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                            </svg>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

<style>
    .home-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 24px;
    }

    /* Welcome Section */
    .welcome-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 32px;
        padding: 32px;
        background: linear-gradient(135deg, #6366f1 0%, #4f46e5 100%);
        border-radius: 16px;
        color: white;
    }

    .welcome-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 8px;
    }

    .welcome-subtitle {
        font-size: 1.125rem;
        opacity: 0.9;
    }

    .user-level-card {
        display: flex;
        align-items: center;
        gap: 20px;
        background: rgba(255, 255, 255, 0.1);
        padding: 16px 24px;
        border-radius: 12px;
        backdrop-filter: blur(10px);
    }

    .level-circle {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 80px;
        height: 80px;
        background: white;
        color: #6366f1;
        border-radius: 50%;
        font-weight: 700;
    }

    .level-number {
        font-size: 2rem;
    }

    .level-label {
        font-size: 0.75rem;
        margin-top: -4px;
    }

    .xp-bar-container {
        min-width: 200px;
    }

    .xp-bar {
        height: 8px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 8px;
    }

    .xp-fill {
        height: 100%;
        background: white;
        transition: width 0.3s ease;
    }

    .xp-text {
        font-size: 0.875rem;
        opacity: 0.9;
    }

    /* Stats Grid */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 32px;
    }

    .stat-card {
        background: #1e293b;
        border-radius: 12px;
        padding: 24px;
        display: flex;
        align-items: center;
        gap: 16px;
        border-left: 4px solid;
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .stat-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
    }

    .stat-card-interviews {
        border-color: #6366f1;
    }

    .stat-card-points {
        border-color: #f59e0b;
    }

    .stat-card-streak {
        border-color: #ef4444;
    }

    .stat-card-badges {
        border-color: #10b981;
    }

    .stat-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 60px;
        height: 60px;
        border-radius: 12px;
        background: rgba(255, 255, 255, 0.05);
    }

    .stat-card-interviews .stat-icon svg { stroke: #6366f1; }
    .stat-card-points .stat-icon svg { stroke: #f59e0b; }
    .stat-card-streak .stat-icon svg { stroke: #ef4444; }
    .stat-card-badges .stat-icon svg { stroke: #10b981; }

    .stat-value {
        font-size: 2rem;
        font-weight: 700;
        color: white;
        margin-bottom: 4px;
    }

    .stat-label {
        font-size: 0.875rem;
        color: #94a3b8;
    }

    /* Actions Section */
    .actions-section {
        margin-bottom: 32px;
    }

    .section-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: white;
        margin-bottom: 20px;
    }

    .actions-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 20px;
    }

    .action-card {
        background: #1e293b;
        border: 2px solid transparent;
        border-radius: 12px;
        padding: 24px;
        text-align: center;
        transition: all 0.3s;
        cursor: pointer;
    }

    .action-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 12px 32px rgba(0, 0, 0, 0.3);
    }

    .action-card-interview:hover { border-color: #6366f1; }
    .action-card-games:hover { border-color: #10b981; }
    .action-card-reports:hover { border-color: #f59e0b; }
    .action-card-profile:hover { border-color: #ef4444; }

    .action-icon-container {
        display: inline-flex;
        padding: 16px;
        border-radius: 12px;
        margin-bottom: 16px;
    }

    .action-card-interview .action-icon-container { background: #6366f120; }
    .action-card-interview .action-icon-container svg { stroke: #6366f1; }

    .action-card-games .action-icon-container { background: #10b98120; }
    .action-card-games .action-icon-container svg { stroke: #10b981; }

    .action-card-reports .action-icon-container { background: #f59e0b20; }
    .action-card-reports .action-icon-container svg { stroke: #f59e0b; }

    .action-card-profile .action-icon-container { background: #ef444420; }
    .action-card-profile .action-icon-container svg { stroke: #ef4444; }

    .action-title {
        font-size: 1.125rem;
        font-weight: 700;
        color: white;
        margin-bottom: 8px;
    }

    .action-description {
        font-size: 0.875rem;
        color: #94a3b8;
    }

    /* Activity Section */
    .activity-section {
        margin-bottom: 32px;
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .btn-view-all {
        padding: 8px 16px;
        background: transparent;
        border: 1px solid #6366f1;
        color: #6366f1;
        border-radius: 8px;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.2s;
    }

    .btn-view-all:hover {
        background: #6366f1;
        color: white;
    }

    .activity-list {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .activity-item {
        display: flex;
        align-items: center;
        gap: 16px;
        background: #1e293b;
        padding: 16px;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s;
    }

    .activity-item:hover {
        background: #2d3748;
        transform: translateX(4px);
    }

    .activity-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        background: #6366f120;
        border-radius: 8px;
    }

    .activity-icon svg {
        stroke: #6366f1;
    }

    .activity-content {
        flex: 1;
    }

    .activity-title {
        font-size: 1rem;
        font-weight: 600;
        color: white;
        margin-bottom: 4px;
    }

    .activity-time {
        font-size: 0.875rem;
        color: #94a3b8;
    }

    .activity-arrow svg {
        stroke: #64748b;
    }

    @@media (max-width: 768px) {
        .welcome-section {
            flex-direction: column;
            text-align: center;
        }

        .welcome-title {
            font-size: 1.75rem;
        }

        .stats-grid {
            grid-template-columns: 1fr;
        }

        .actions-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

@code {
    private User? currentUser;
    private List<Chat> recentChats = new();
    private int totalInterviews = 0;
    private int userBadgesCount = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var email = await AuthService.GetCurrentUserEmailAsync();
            
            if (!string.IsNullOrEmpty(email))
            {
                using var db = await DbFactory.CreateDbContextAsync();
                
                currentUser = await db.Users
                    .FirstOrDefaultAsync(u => u.Email == email);
                
                if (currentUser != null)
                {
                    recentChats = await db.Chats
                        .Where(c => c.UserId == currentUser.Id)
                        .OrderByDescending(c => c.CreatedAt)
                        .Take(10)
                        .ToListAsync();
                    
                    totalInterviews = recentChats.Count;
                    
                    userBadgesCount = await db.UserBadges
                        .Where(ub => ub.UserId == currentUser.Id)
                        .CountAsync();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading home data: {ex.Message}");
        }
    }

    private string GetUserName()
    {
        return currentUser?.Name ?? "Usuario";
    }

    private int GetNextLevelXP()
    {
        if (currentUser == null) return 100;
        return 100 * (currentUser.Level + 1) * (currentUser.Level + 1);
    }

    private double GetLevelProgress()
    {
        if (currentUser == null) return 0;
        var nextLevelXP = GetNextLevelXP();
        return (double)currentUser.Experience / nextLevelXP * 100;
    }

    private async Task StartNewInterview()
    {
        if (currentUser != null)
        {
            using var db = await DbFactory.CreateDbContextAsync();
            var newChat = new Chat
            {
                UserId = currentUser.Id,
                Title = $"Entrevista {DateTime.Now:dd/MM/yyyy HH:mm}",
                CreatedAt = DateTime.UtcNow
            };
            
            db.Chats.Add(newChat);
            await db.SaveChangesAsync();
            
            Navigation.NavigateTo($"/chat/{newChat.Id}");
        }
    }

    private void GoToGames()
    {
        Navigation.NavigateTo("/gamification");
    }

    private void ViewReports()
    {
        Navigation.NavigateTo("/reports");
    }

    private void ViewProfile()
    {
        Navigation.NavigateTo("/profile");
    }

    private void ViewAllChats()
    {
        // Navigate to full chat history page (if exists)
        Navigation.NavigateTo("/profile");
    }

    private void OpenChat(int chatId)
    {
        Navigation.NavigateTo($"/chat/{chatId}");
    }
}

