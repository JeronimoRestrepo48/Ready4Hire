name: CI/CD Pipeline - Ready4Hire AI

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

env:
  PYTHON_VERSION: '3.9'

jobs:
  # 1. CODE QUALITY
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install flake8 black mypy pylint bandit safety
          pip install -r requirements.txt
      
      - name: Run Black (Code Formatting)
        run: black --check app/ tests/ || true
      
      - name: Run Flake8 (Linting)
        run: flake8 app/ tests/ --max-line-length=120 --ignore=E203,W503 || true
      
      - name: Run Bandit (Security Scanning)
        run: bandit -r app/ -ll || true

  # 2. UNIT TESTS
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg portaudio19-dev
      
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run Unit Tests with Coverage
        run: |
          pytest tests/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=term-missing \
            -v || true
      
      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
        if: always()

  # 3. BUILD DOCKER
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ready4hire:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
